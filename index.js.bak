var net = require("net");
var server = net.createServer();
var csmsPort = 2222;
var maxConnections = 1000000;
//emitted when server closes ...not emitted until all connections closes.
server.on("close", function () {
    console.log("Server closed !");
});
// emitted when new client connects
server.on("connection", function (socket) {
    console.log("Buffer size : \" ".concat(socket.writableLength));
    console.log("---------server details -----------------");
    var address = server.address();
    var port = address.port;
    var family = address.family;
    var ipaddr = address.address;
    console.log("Server port: ".concat(port, ", IP: ").concat(ipaddr, ", IP Family: ").concat(family));
    var lport = socket.localPort;
    var laddr = socket.localAddress;
    console.log("Server Local port: ".concat(lport, ", Local IP: ").concat(laddr));
    console.log("------------remote client info --------------");
    var rport = socket.remotePort;
    var raddr = socket.remoteAddress;
    var rfamily = socket.remoteFamily;
    console.log("Remote IP: ".concat(raddr, ", Remote port: ").concat(rport, ",  Remote Family: ").concat(rfamily));
    console.log("--------------------------------------------");
    //let no_of_connections =  server.getConnections(); // sychronous version
    server.getConnections(function (error, count) {
        console.log("Number of concurrent connections to the server : " + count);
    });
    socket.setEncoding("utf8");
    socket.setTimeout(800000, function () {
        console.log("Socket timed out");
    });
    socket.on("data", function (data) {
        var bread = socket.bytesRead;
        var bwrite = socket.bytesWritten;
        var receivedData = data.toString();
        var receivedId = receivedData.substring(0, 2);
        var receivedContent = receivedData.substring(2);
        console.log("Data Type of ".concat(typeof data));
        console.log("Bytes read: ".concat(bread, ", Written: ").concat(bwrite));
        console.log("Data sent to server : " + data);
        console.log("ID: ".concat(receivedId, " :- ").concat(receivedContent));
        // const result = await db.proc('procName', [userName]);
        //echo data
        var is_kernel_buffer_full = socket.write("Data: " + data);
        if (is_kernel_buffer_full) {
            console.log("Data was flushed successfully from kernel buffer i.e written successfully!");
        }
        else {
            socket.pause();
        }
    });
    socket.on("drain", function () {
        console.log("write buffer is empty now .. You can resume the writable stream");
        socket.resume();
    });
    socket.on("error", function (error) {
        console.log("Error : " + error);
    });
    socket.on("timeout", function () {
        console.log("Socket timed out !");
        socket.end("Timed out!");
        // can call socket.destroy() here too.
    });
    socket.on("end", function (data) {
        console.log("Socket ended from other end!");
        console.log("End data: " + data);
    });
    socket.on("close", function (error) {
        var bread = socket.bytesRead;
        var bwrite = socket.bytesWritten;
        console.log("Bytes read: ".concat(bread, ", Written: ").concat(bwrite));
        console.log("Socket closed!");
        if (error) {
            console.log("Socket was closed coz of transmission error");
        }
    });
    //   setTimeout(function () {
    //     let isdestroyed = socket.destroyed;
    //     console.log("Socket destroyed:" + isdestroyed);
    //     socket.destroy();
    //   }, 1200000);
});
// emits when any error occurs -> calls closed event immediately after this.
server.on("error", function (error) {
    console.log("Error: " + error);
});
//emits when server is bound with server.listen
server.on("listening", function () {
    console.log("Server is listening ...");
});
server.maxConnections = maxConnections;
server.listen(csmsPort);
var islistening = server.listening;
if (!islistening) {
    console.log("Server is not listening");
}
